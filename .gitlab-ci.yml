stages:
  - diagnostic
  - setup
  - build
  - test
  - publish
  - staging
  - deploy

variables:
  AWS_DEFAULT_REGION: us-west-2
  AWS_REGISTRY_IMAGE: $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$CI_PROJECT_NAME:$CI_BUILD_REF_SLUG

cache:
  paths:
    - node_modules

diagnostic:
  script:
    - mount
    - env | sort
    
setup:
  stage: setup
  image: node
  script:
    - npm install

build:
  stage: build
  image: docker
  # runner should mount docker.sock instead of services: docker:dind
  services:
    - docker:dind
  before_script:
    - docker info
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE .
    - docker push $CI_REGISTRY_IMAGE

test:
  stage: test
  image: $CI_REGISTRY_IMAGE
  script:
    - npm test

# WIP
publish_aws:
  stage: publish
  image: docker
  services:
    - docker:dind
  before_script:
    - '[ -z "$AWS_ACCOUNT_ID" ] && { echo AWS_ACCOUNT_ID missing; exit 1; }'
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE
    - docker push $AWS_REGISTRY_IMAGE

# WIP
staging_aws:
  stage: staging
  image:
    name: anigeo/awscli
    entrypoint: ["/bin/sh", "-c"]
  environment:
    name: staging
    url: http://staging.example.com/
  before_script:
    - '[ -z "$AWS_ACCESS_KEY" ] && { echo AWS_ACCESS_KEY missing; exit 1; }'
    - '[ -z "$AWS_SECRET_ACCESS_KEY" ] && { echo AWS_SECRET_ACCESS_KEY missing; exit 1; }'
  script:
    - aws --version
    - aws ecs deploy
  only:
    - master

# WIP
deploy_aws:
  stage: deploy
  image:
    name: anigeo/awscli
    entrypoint: ["/bin/sh", "-c"]
  environment:
    name: production
    url: https://example.com/
  script:
    - aws ecs help
  when: manual
  only:
    - master
